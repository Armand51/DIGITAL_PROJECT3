packages_to_install <- c("openxlsx", "dplyr")

# Vérifier si les packages sont installés, sinon les installer
for (package in packages_to_install) {
  if (!requireNamespace(package, quietly = TRUE)) {
    install.packages(package, dependencies = TRUE)
  }
}

library(openxlsx)
library(dplyr)
data <- read.xlsx("data/raw/Bdd_filtre.xlsx")
get_modalites_with_counts <- function(base, nom_colonne) {
  if (nom_colonne %in% colnames(base)) {
    modalites <- table(base[[nom_colonne]], useNA = "ifany")
    modalites_df <- data.frame(Modalite = names(modalites), Effectif = as.vector(modalites))
    return(modalites_df)
  } else {
    cat("La colonne spécifiée n'existe pas dans la base de données.")
    return(NULL)
  }
}



#modalites <- get_modalites_with_counts(data, "NomDeLaColonne")

remove_rows_by_value <- function(dataframe, nom_colonne, valeur_a_supprimer) {
  dataframe <- dataframe[dataframe[[nom_colonne]] != valeur_a_supprimer, ]
    return(dataframe)
 }

#data <- remove_rows_by_value(data, "NomDeLaColonne", "ValeurASupprimer")

replace_value_in_column <- function(dataframe, nom_colonne, ancienne_valeur, nouvelle_valeur) {
  dataframe[[nom_colonne]][dataframe[[nom_colonne]] == ancienne_valeur] <- nouvelle_valeur
  return(dataframe)
}

#data <- replace_value_in_column(data, "NomDeLaColonne", "AncienneValeur", "NouvelleValeur")

supprimer_lignes_na <- function(nom_colonne, dataframe) {
  if (nom_colonne %in% colnames(dataframe)) {
    dataframe <- dataframe[!is.na(dataframe[[nom_colonne]]), ]
    return(dataframe)
  } else {
    cat("La colonne spécifiée n'existe pas dans le dataframe.")
    return(NULL)
  }
}

remplacer_NA <- function(dataframe, nom_colonne, nouvelle_valeur) {
  # Vérifie si le dataframe a la colonne spécifiée
  if (nom_colonne %in% names(dataframe)) {
    # Remplace les NA dans la colonne par la nouvelle valeur
    dataframe[is.na(dataframe[[nom_colonne]]), nom_colonne] <- nouvelle_valeur
    return(dataframe)
  } else {
    cat("La colonne spécifiée n'existe pas dans le dataframe.\n")
    return(NULL)
  }
}

#data <- supprimer_lignes_na(nom_colonne, data)


####DEBUT NETTOYAGE

##Examination de chaque variable
modalites <- get_modalites_with_counts(data, "type_dpe")
modalites <- get_modalites_with_counts(data, "annee_construction_dpe")
modalites <- get_modalites_with_counts(data, "version")
modalites <- get_modalites_with_counts(data, "nombre_niveau_logement")
modalites <- get_modalites_with_counts(data, "surface_habitable_logement")
modalites <- get_modalites_with_counts(data, "conso_5_usages_ep_m2")
modalites <- get_modalites_with_counts(data, "conso_5_usages_ef_m2")
modalites <- get_modalites_with_counts(data, "emission_ges_5_usages_m2")
modalites <- get_modalites_with_counts(data, "classe_bilan_dpe")
modalites <- get_modalites_with_counts(data, "classe_emission_ges")
modalites <- get_modalites_with_counts(data, "type_installation_chauffage")
modalites <- get_modalites_with_counts(data, "type_energie_chauffage")
modalites <- get_modalites_with_counts(data, "type_generateur_chauffage")
modalites <- get_modalites_with_counts(data, "type_generateur_chauffage_anciennete")
modalites <- get_modalites_with_counts(data, "type_energie_chauffage_appoint")
modalites <- get_modalites_with_counts(data, "nb_generateur_chauffage")
modalites <- get_modalites_with_counts(data, "nb_installation_chauffage")
modalites <- get_modalites_with_counts(data, "type_installation_ecs")
modalites <- get_modalites_with_counts(data, "type_energie_ecs")
modalites <- get_modalites_with_counts(data, "type_generateur_ecs")
modalites <- get_modalites_with_counts(data, "type_generateur_ecs_anciennete")
modalites <- get_modalites_with_counts(data, "ecs_solaire")
modalites <- get_modalites_with_counts(data, "nb_generateur_ecs")
modalites <- get_modalites_with_counts(data, "nb_installation_ecs")
modalites <- get_modalites_with_counts(data, "plusieurs_facade_exposee")
modalites <- get_modalites_with_counts(data, "type_ventilation")
modalites <- get_modalites_with_counts(data, "type_vitrage")
modalites <- get_modalites_with_counts(data, "type_materiaux_menuiserie")
modalites <- get_modalites_with_counts(data, "type_gaz_lame")
modalites <- get_modalites_with_counts(data, "type_fermeture")
modalites <- get_modalites_with_counts(data, "epaisseur_lame")
modalites <- get_modalites_with_counts(data, "vitrage_vir")
modalites <- get_modalites_with_counts(data, "surface_vitree_nord")
modalites <- get_modalites_with_counts(data, "surface_vitree_sud")
modalites <- get_modalites_with_counts(data, "surface_vitree_ouest")
modalites <- get_modalites_with_counts(data, "surface_vitree_est")
modalites <- get_modalites_with_counts(data, "surface_vitree_horizontal")
modalites <- get_modalites_with_counts(data, "u_baie_vitree")
modalites <- get_modalites_with_counts(data, "uw")
modalites <- get_modalites_with_counts(data, "facteur_solaire_baie_vitree")
modalites <- get_modalites_with_counts(data, "presence_balcon")
modalites <- get_modalites_with_counts(data, "l_orientation_baie_vitree")
modalites <- get_modalites_with_counts(data, "type_isolation_mur_exterieur")
modalites <- get_modalites_with_counts(data, "epaisseur_isolation_mur_exterieur_estim")
modalites <- get_modalites_with_counts(data, "materiaux_structure_mur_exterieur")
modalites <- get_modalites_with_counts(data, "epaisseur_structure_mur_exterieur")
modalites <- get_modalites_with_counts(data, "l_local_non_chauffe_mur")
modalites <- get_modalites_with_counts(data, "local_non_chauffe_principal_mur")
modalites <- get_modalites_with_counts(data, "l_orientation_mur_exterieur")
modalites <- get_modalites_with_counts(data, "type_isolation_plancher_bas")
modalites <- get_modalites_with_counts(data, "type_plancher_bas_deperditif")
modalites <- get_modalites_with_counts(data, "u_plancher_bas_final_deperditif")
modalites <- get_modalites_with_counts(data, "u_plancher_bas_brut_deperditif")
modalites <- get_modalites_with_counts(data, "l_local_non_chauffe_plancher_bas")
modalites <- get_modalites_with_counts(data, "local_non_chauffe_principal_plancher_bas")
modalites <- get_modalites_with_counts(data, "type_adjacence_principal_plancher_bas")
modalites <- get_modalites_with_counts(data, "type_isolation_plancher_haut")
modalites <- get_modalites_with_counts(data, "type_plancher_haut_deperditif")
modalites <- get_modalites_with_counts(data, "l_local_non_chauffe_plancher_haut")
modalites <- get_modalites_with_counts(data, "local_non_chauffe_principal_plancher_haut")
modalites <- get_modalites_with_counts(data, "type_adjacence_principal_plancher_haut")
modalites <- get_modalites_with_counts(data, "type_porte")
modalites <- get_modalites_with_counts(data, "u_porte")
modalites <- get_modalites_with_counts(data, "classe_inertie")
modalites <- get_modalites_with_counts(data, "deperdition_mur")
modalites <- get_modalites_with_counts(data, "deperdition_baie_vitree")
modalites <- get_modalites_with_counts(data, "deperdition_plancher_bas")
modalites <- get_modalites_with_counts(data, "deperdition_plancher_haut")
modalites <- get_modalites_with_counts(data, "deperdition_pont_thermique")
modalites <- get_modalites_with_counts(data, "deperdition_porte")

##Fusion de modalités
#type_generateur_chauffage
data <- replace_value_in_column(data, "type_generateur_chauffage", "chaudiere fioul basse temperature", "chaudiere fioul")
data <- replace_value_in_column(data, "type_generateur_chauffage", "chaudiere fioul condensation", "chaudiere fioul")
data <- replace_value_in_column(data, "type_generateur_chauffage", "chaudiere fioul standard", "chaudiere fioul")
data <- replace_value_in_column(data, "type_generateur_chauffage", "chaudiere gaz basse temperature", "chaudiere gaz")
data <- replace_value_in_column(data, "type_generateur_chauffage", "chaudiere gaz condensation", "chaudiere gaz")
data <- replace_value_in_column(data, "type_generateur_chauffage", "chaudiere gaz standard", "chaudiere gaz")
data <- replace_value_in_column(data, "type_generateur_chauffage", "chaudiere gpl/butane/propane basse temperature", "chaudiere gpl/butane/propane")
data <- replace_value_in_column(data, "type_generateur_chauffage", "chaudiere gpl/butane/propane condensation", "chaudiere gpl/butane/propane")
data <- replace_value_in_column(data, "type_generateur_chauffage", "chaudiere gpl/butane/propane standard", "chaudiere gpl/butane/propane")
modalites <- get_modalites_with_counts(data, "type_generateur_chauffage")



#type_generateur_ecs
data <- replace_value_in_column(data, "type_generateur_ecs", "chaudiere fioul basse temperature", "chaudiere fioul")
data <- replace_value_in_column(data, "type_generateur_ecs", "chaudiere fioul condensation", "chaudiere fioul")
data <- replace_value_in_column(data, "type_generateur_ecs", "chaudiere fioul standard", "chaudiere fioul")
data <- replace_value_in_column(data, "type_generateur_ecs", "chaudiere gaz basse temperature", "chaudiere gaz")
data <- replace_value_in_column(data, "type_generateur_ecs", "chaudiere gaz condensation", "chaudiere gaz")
data <- replace_value_in_column(data, "type_generateur_ecs", "chaudiere gaz standard", "chaudiere gaz")
data <- replace_value_in_column(data, "type_generateur_ecs", "chaudiere gpl/butane/propane basse temperature", "chaudiere gpl/butane/propane")
data <- replace_value_in_column(data, "type_generateur_ecs", "chaudiere gpl/butane/propane condensation", "chaudiere gpl/butane/propane")
data <- replace_value_in_column(data, "type_generateur_ecs", "chaudiere gpl/butane/propane standard", "chaudiere gpl/butane/propane")
data <- replace_value_in_column(data, "type_generateur_ecs", "chaudiere gpl/butane/propaneindependant", "chaudiere gpl/butane/propane")
modalites <- get_modalites_with_counts(data, "type_generateur_ecs")

#type_ventilation
data <- replace_value_in_column(data, "type_ventilation", "Ventilation mÃ©canique double flux avec Ã©changeur", "Ventilation mÃ©canique double flux")
data <- replace_value_in_column(data, "type_ventilation", "Ventilation mÃ©canique double flux sans Ã©changeur", "Ventilation mÃ©canique double flux")
modalites <- get_modalites_with_counts(data, "type_ventilation")

#materiaux_structure_mur_exterieur
data <- replace_value_in_column(data, "materiaux_structure_mur_exterieur", "murs bois (rondin)", "murs en pan de bois")
data <- replace_value_in_column(data, "materiaux_structure_mur_exterieur", "murs en pan de bois sans remplissage tout venant", "murs en pan de bois")
data <- replace_value_in_column(data, "materiaux_structure_mur_exterieur", "murs en pan de bois avec remplissage tout venant", "murs en pan de bois")
data <- replace_value_in_column(data, "materiaux_structure_mur_exterieur", "murs en ossature bois avec isolant en remplissage <2001", "murs en ossature bois")
data <- replace_value_in_column(data, "materiaux_structure_mur_exterieur", "murs en ossature bois avec isolant en remplissage 2001-2005", "murs en ossature bois")
data <- replace_value_in_column(data, "materiaux_structure_mur_exterieur", "murs en ossature bois avec isolant en remplissage â‰¥ 2006", "murs en ossature bois")
data <- replace_value_in_column(data, "materiaux_structure_mur_exterieur", "murs en ossature bois avec remplissage tout venant", "murs en ossature bois")
data <- replace_value_in_column(data, "materiaux_structure_mur_exterieur", "murs en ossature bois sans remplissage", "murs en ossature bois")
data <- replace_value_in_column(data, "materiaux_structure_mur_exterieur", "bÃ©ton cellulaire", "murs en béton")
data <- replace_value_in_column(data, "materiaux_structure_mur_exterieur", "murs en bÃ©ton banchÃ©", "murs en béton")
data <- replace_value_in_column(data, "materiaux_structure_mur_exterieur", "murs en bÃ©ton de mÃ¢chefer", "murs en béton")
data <- replace_value_in_column(data, "materiaux_structure_mur_exterieur", "brique terre cuite alvÃ©olaire", "autre matÃ©riau non rÃ©pertoriÃ©")
data <- replace_value_in_column(data, "materiaux_structure_mur_exterieur", "cloison de plÃ¢tre", "autre matÃ©riau non rÃ©pertoriÃ©")
data <- replace_value_in_column(data, "materiaux_structure_mur_exterieur", "murs en ossature bois", "autre matÃ©riau non rÃ©pertoriÃ©")
data <- replace_value_in_column(data, "materiaux_structure_mur_exterieur", "murs sandwich bÃ©ton/isolant/bÃ©ton (sans isolation rapportÃ©e)", "autre matÃ©riau non rÃ©pertoriÃ©")
modalites <- get_modalites_with_counts(data, "materiaux_structure_mur_exterieur")

#local_non_chauffe_principal_plancher_bas
data <- replace_value_in_column(data, "local_non_chauffe_principal_plancher_bas", "circulation avec bouche ou gaine de dÃ©senfumage ouverte en permanence", "circulation")
data <- replace_value_in_column(data, "local_non_chauffe_principal_plancher_bas", "circulation avec ouverture directe sur l'extÃ©rieur", "circulation")
data <- replace_value_in_column(data, "local_non_chauffe_principal_plancher_bas", "circulation sans ouverture directe sur l'extÃ©rieur", "circulation")
data <- replace_value_in_column(data, "local_non_chauffe_principal_plancher_bas", "hall d'entrÃ©e avec dispositif de fermeture automatique", "hall")
data <- replace_value_in_column(data, "local_non_chauffe_principal_plancher_bas", "hall d'entrÃ©e sans dispositif de fermeture automatique", "hall")
data <- replace_value_in_column(data, "local_non_chauffe_principal_plancher_bas", "espace tampon solarisÃ© (vÃ©randa,loggia fermÃ©e)", "autres dÃ©pendances")
data <- replace_value_in_column(data, "local_non_chauffe_principal_plancher_bas", "garage privÃ© collectif", "garage")
data <- replace_value_in_column(data, "local_non_chauffe_principal_plancher_bas", "cellier", "autres dÃ©pendances")
modalites <- get_modalites_with_counts(data, "local_non_chauffe_principal_plancher_bas")

#type_adjacence_principal_plancher_bas
data <- replace_value_in_column(data, "type_adjacence_principal_plancher_bas", "circulation avec bouche ou gaine de dÃ©senfumage ouverte en permanence", "circulation")
data <- replace_value_in_column(data, "type_adjacence_principal_plancher_bas", "circulation avec ouverture directe sur l'extÃ©rieur", "circulation")
data <- replace_value_in_column(data, "type_adjacence_principal_plancher_bas", "circulation sans ouverture directe sur l'extÃ©rieur", "circulation")
data <- replace_value_in_column(data, "type_adjacence_principal_plancher_bas", "hall d'entrÃ©e avec dispositif de fermeture automatique", "hall")
data <- replace_value_in_column(data, "type_adjacence_principal_plancher_bas", "hall d'entrÃ©e sans dispositif de fermeture automatique", "hall")
data <- replace_value_in_column(data, "type_adjacence_principal_plancher_bas", "espace tampon solarisÃ© (vÃ©randa,loggia fermÃ©e)", "autres dÃ©pendances")
data <- replace_value_in_column(data, "type_adjacence_principal_plancher_bas", "garage privÃ© collectif", "garage")
data <- replace_value_in_column(data, "type_adjacence_principal_plancher_bas", "cellier", "autres dÃ©pendances")
modalites <- get_modalites_with_counts(data, "type_adjacence_principal_plancher_bas")

#type_plancher_haut_deperditif
data <- replace_value_in_column(data, "type_plancher_haut_deperditif", "autre type de plafond non rÃ©pertoriÃ©", "autre")
data <- replace_value_in_column(data, "type_plancher_haut_deperditif", "bardeaux et remplissage", "autre")
data <- replace_value_in_column(data, "type_plancher_haut_deperditif", "plafond bois sous solives mÃ©talliques", "autre")
data <- replace_value_in_column(data, "type_plancher_haut_deperditif", "plafond bois sur solives mÃ©talliques", "autre")
data <- replace_value_in_column(data, "type_plancher_haut_deperditif", "plafond entre solives mÃ©talliques avec ou sans remplissage", "autre")
data <- replace_value_in_column(data, "type_plancher_haut_deperditif", "plafond lourd type entrevous terre-cuite, poutrelles bÃ©ton", "autre")
data <- replace_value_in_column(data, "type_plancher_haut_deperditif", "toitures en Bac acier", "autre")
modalites <- get_modalites_with_counts(data, "type_plancher_haut_deperditif")

#local_non_chauffe_principal_plancher_haut
data <- replace_value_in_column(data, "local_non_chauffe_principal_plancher_haut", "hall d'entrÃ©e avec dispositif de fermeture automatique","hall")
data <- replace_value_in_column(data, "local_non_chauffe_principal_plancher_haut", "hall d'entrÃ©e sans dispositif de fermeture automatique","hall")
data <- replace_value_in_column(data, "local_non_chauffe_principal_plancher_haut", "circulation avec ouverture directe sur l'extÃ©rieur","circulation")
data <- replace_value_in_column(data, "local_non_chauffe_principal_plancher_haut", "circulation sans ouverture directe sur l'extÃ©rieur","circulation")
data <- replace_value_in_column(data, "local_non_chauffe_principal_plancher_haut", "circulation avec bouche ou gaine de dÃ©senfumage ouverte en permanence","circulation")
data <- replace_value_in_column(data, "local_non_chauffe_principal_plancher_haut", "comble faiblement ventilÃ©","comble")
data <- replace_value_in_column(data, "local_non_chauffe_principal_plancher_haut", "comble trÃ¨s faiblement ventilÃ©","comble")
data <- replace_value_in_column(data, "local_non_chauffe_principal_plancher_haut", "comble fortement ventilÃ©","comble")
modalites <- get_modalites_with_counts(data, "local_non_chauffe_principal_plancher_haut")

#type_adjacence_principal_plancher_haut
data <- replace_value_in_column(data, "type_adjacence_principal_plancher_haut", "comble faiblement ventilÃ©","comble")
data <- replace_value_in_column(data, "type_adjacence_principal_plancher_haut", "comble fortement ventilÃ©","comble")
data <- replace_value_in_column(data, "type_adjacence_principal_plancher_haut", "comble trÃ¨s faiblement ventilÃ©","comble")
data <- replace_value_in_column(data, "type_adjacence_principal_plancher_haut", "circulation avec ouverture directe sur l'extÃ©rieur","circulation")
data <- replace_value_in_column(data, "type_adjacence_principal_plancher_haut", "circulation sans ouverture directe sur l'extÃ©rieur","circulation")
modalites <- get_modalites_with_counts(data, "type_adjacence_principal_plancher_haut")


##Scindage de colonnes
#l_orientation_baie_vitree
data <- data %>%
  mutate(
    l_orientation_baie_vitreenord = ifelse(is.na(l_orientation_baie_vitree), NA, as.integer(grepl("nord", l_orientation_baie_vitree))),
    l_orientation_baie_vitreesud = ifelse(is.na(l_orientation_baie_vitree), NA, as.integer(grepl("sud", l_orientation_baie_vitree))),
    l_orientation_baie_vitreeest = ifelse(is.na(l_orientation_baie_vitree), NA, as.integer(grepl("est", l_orientation_baie_vitree))),
    l_orientation_baie_vitreeouest = ifelse(is.na(l_orientation_baie_vitree), NA, as.integer(grepl("ouest", l_orientation_baie_vitree)))
  )
data<- subset(data, select = -l_orientation_baie_vitree)

#l_local_non_chauffe_mur
data <- data %>%
  mutate(
    l_local_non_chauffe_murgarage = ifelse(is.na(l_local_non_chauffe_mur), NA, as.integer(grepl("garage", l_local_non_chauffe_mur))),
    l_local_non_chauffe_murcomble = ifelse(is.na(l_local_non_chauffe_mur), NA, as.integer(grepl("comble", l_local_non_chauffe_mur))),
    l_local_non_chauffe_murcellier = ifelse(is.na(l_local_non_chauffe_mur), NA, as.integer(grepl("cellier", l_local_non_chauffe_mur))),
    l_local_non_chauffe_murhall = ifelse(is.na(l_local_non_chauffe_mur), NA, as.integer(grepl("hall", l_local_non_chauffe_mur))),
    l_local_non_chauffe_murcirculation = ifelse(is.na(l_local_non_chauffe_mur), NA, as.integer(grepl("circulation", l_local_non_chauffe_mur)))
    )
data<- subset(data, select = -l_local_non_chauffe_mur)

#l_orientation_mur_exterieur
data <- data %>%
  mutate(
    l_orientation_mur_exterieurnord = ifelse(is.na(l_orientation_mur_exterieur), NA, as.integer(grepl("nord", l_orientation_mur_exterieur))),
    l_orientation_mur_exterieursud = ifelse(is.na(l_orientation_mur_exterieur), NA, as.integer(grepl("sud", l_orientation_mur_exterieur))),
    l_orientation_mur_exterieurest = ifelse(is.na(l_orientation_mur_exterieur), NA, as.integer(grepl("est", l_orientation_mur_exterieur))),
    l_orientation_mur_exterieurouest = ifelse(is.na(l_orientation_mur_exterieur), NA, as.integer(grepl("ouest", l_orientation_mur_exterieur)))
  )
data<- subset(data, select = -l_orientation_mur_exterieur)

#l_local_non_chauffe_plancher_bas
data <- data %>%
  mutate(
    l_local_non_chauffe_plancher_bascirculation = ifelse(is.na(l_local_non_chauffe_plancher_bas), NA, as.integer(grepl("circulation", l_local_non_chauffe_plancher_bas))),
    l_local_non_chauffe_plancher_basautre = ifelse(is.na(l_local_non_chauffe_plancher_bas), NA, as.integer(grepl("autre", l_local_non_chauffe_plancher_bas))),
    l_local_non_chauffe_plancher_bashall = ifelse(is.na(l_local_non_chauffe_plancher_bas), NA, as.integer(grepl("hall", l_local_non_chauffe_plancher_bas))),
    l_local_non_chauffe_plancher_bascellier = ifelse(is.na(l_local_non_chauffe_plancher_bas), NA, as.integer(grepl("cellier", l_local_non_chauffe_plancher_bas))),
    l_local_non_chauffe_plancher_basgarage = ifelse(is.na(l_local_non_chauffe_plancher_bas), NA, as.integer(grepl("garage", l_local_non_chauffe_plancher_bas)))
  )
data<- subset(data, select = -l_local_non_chauffe_plancher_bas)

#l_local_non_chauffe_plancher_haut
data <- data %>%
  mutate(
    l_local_non_chauffe_plancher_hautcirculation = ifelse(is.na(l_local_non_chauffe_plancher_haut), NA, as.integer(grepl("circulation", l_local_non_chauffe_plancher_haut))),
    l_local_non_chauffe_plancher_hautlocaux = ifelse(is.na(l_local_non_chauffe_plancher_haut), NA, as.integer(grepl("locaux", l_local_non_chauffe_plancher_haut))),
    l_local_non_chauffe_plancher_hautcomble = ifelse(is.na(l_local_non_chauffe_plancher_haut), NA, as.integer(grepl("comble", l_local_non_chauffe_plancher_haut))),
    l_local_non_chauffe_plancher_hautgarage = ifelse(is.na(l_local_non_chauffe_plancher_haut), NA, as.integer(grepl("garage", l_local_non_chauffe_plancher_haut)))
  )
data<- subset(data, select = -l_local_non_chauffe_plancher_haut)

###Gestion des NA

##Examination des NA

na_count <- colSums(is.na(data))
na_summary <- data.frame(
  Colonne = names(na_count),
  NA_Count = na_count
)
na_summary_filtered <- na_summary[na_summary$NA_Count > 0, ]

##A VOIR
modalites <- get_modalites_with_counts(data, "classe_inertie")
modalites <- get_modalites_with_counts(data, "type_installation_chauffage")

##Remplacement des NA
for (col_name in names(data)) {
  # Vérifiez si le nom de la colonne contient "baie_vitree"
  if (grepl("baie_vitree", col_name, ignore.case = TRUE)) {
    # Remplacez les NA par "pas de baie vitree" dans la colonne correspondante
    data[is.na(data[[col_name]]), col_name] <- "pas de baie vitree"
  }
}   #remplace les NA des colonnes sur les baies vitrées par "pas de baie vitree"


##Suppression des NA
data <- supprimer_lignes_na("surface_habitable_logement", data) #5 NA
data <- supprimer_lignes_na("type_installation_chauffage", data) #1942 NA qui se retrouvent dans plusieurs colonnes importantes
data <- supprimer_lignes_na("type_installation_ecs", data) #23 NA qui se retrouvent dans plusieurs colonnes importantes

write.csv(data, "C:/Users/Guillaume/Documents/DIGITAL_PROJECT3/data/processed/bdd_clean.csv", row.names = FALSE)